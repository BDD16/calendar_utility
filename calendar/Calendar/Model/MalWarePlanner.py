from PyQt5.QtCore import QTime, pyqtSignal
from PyQt5.QtWidgets import QCalendarWidget, QWidget, QLineEdit, QPushButton, QTextEdit, QCheckBox, QTimeEdit, \
    QComboBox, QListWidget, QHBoxLayout


class MalWarePlanner(QCalendarWidget):
    events = {}

    def __init__(self, parent=None):
        super(MalWarePlanner, self).__init__(parent=parent)
        self.view = parent
        self.event_list = None
        self.event_title = None
        self.event_category = None
        self.event_time = None
        self.allday_check = None
        self.event_detail = None
        self.add_button = None
        self.del_button = None

    def clear_form(self):
        self.event_title.clear()
        self.event_category.setCurrentIndex(0)
        self.event_time.setTime(QTime(8, 0))
        self.allday_check.setChecked(False)
        self.event_detail.setPlainText('')

    def populate_list(self):
        # As reported by github user eramey16, we need the following line
        # to unselect list items since the selected index may not exist
        # in the new list.  This line is not in the book code.
        self.event_list.setCurrentRow(-1)

        self.event_list.clear()
        self.clear_form()
        date = self.selectedDate()
        for event in self.events.get(date, []):
            time = (
                event['time'].toString('hh:mm')
                if event['time']
                else 'All Day'
            )
            self.event_list.addItem(f"{time}: {event['title']}")

    def populate_form(self):
        self.clear_form()
        date = self.selectedDate()
        event_number = self.event_list.currentRow()
        if event_number == -1:
            return

        event_data = self.events.get(date)[event_number]

        self.event_category.setCurrentText(event_data['category'])
        if event_data['time'] is None:
            self.allday_check.setChecked(True)
        else:
            self.event_time.setTime(event_data['time'])
        self.event_title.setText(event_data['title'])
        self.event_detail.setPlainText(event_data['detail'])

    def save_event(self):
        event = {
            'category': self.event_category.currentText(),
            'time': (
                None
                if self.allday_check.isChecked()
                else self.event_time.time()
            ),
            'title': self.event_title.text(),
            'detail': self.event_detail.toPlainText()
        }

        date = self.selectedDate()
        event_list = self.events.get(date, [])
        event_number = self.event_list.currentRow()

        # if no events are selected, this is a new event
        if event_number == -1:
            event_list.append(event)
        else:
            event_list[event_number] = event

        event_list.sort(key=lambda x: x['time'] or QTime(0, 0))
        self.events[date] = event_list
        self.populate_list()

    def delete_event(self):
        date = self.selectedDate()
        row = self.event_list.currentRow()
        del (self.events[date][row])
        self.event_list.setCurrentRow(-1)
        self.clear_form()
        self.populate_list()

    def check_delete_btn(self):
        self.del_button.setDisabled(self.event_list.currentRow() == -1)

    def on_category_change(self, text):
        if text == 'Newâ€¦':
            self.dialog = CategoryWindow()
            self.dialog.submitted.connect(self.add_category)
            self.event_category.setCurrentIndex(0)

    def add_category(self, category):
        self.event_category.addItem(category)
        self.event_category.setCurrentText(category)


class CategoryWindow(QWidget):
    submitted = pyqtSignal([str], [int, str])

    def __init__(self, parent=None):
        super(CategoryWindow, self).__init__(parent=parent)

        self.edit = QLineEdit(parent)
        self.submit = QPushButton(text='Submit')
        self.submit.clicked.connect(self.onSubmit)
        self.hbox = QHBoxLayout(self)
        self.hbox.addWidget(self.edit)
        self.hbox.addWidget(self.submit)
        self.show()

        #parent.splitter2.addwidget(self.edit)
        #parent.splitter2.addWidget(self.submit)

    def onSubmit(self):
        if self.edit.text().isdigit():
            text = self.edit.text()
            self.submitted[int, str].emit(int(text), text)
        else:
            self.submitted[str].emit(self.edit.text())
        self.close()
